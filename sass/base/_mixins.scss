@mixin transition($prop) {
  -webkit-transition: $prop;
  -moz-transition: $prop;
  -o-transition: $prop;
  transition: $prop;
}

// Mixins simple solutions to complicated CSS problems... thank me later
// Vendor Prefix generator for properties that need them. 
// This one is to be used for general cases where there isn't already a mixin built with the prefixes in place.
@mixin prefix($map, $vendors: webkit moz ms o) {
  @each $prop,
  $value in $map {
    @if $vendors {
      @each $vendor in $vendors {
        #{'-' + $vendor + '-' + $prop}: #{$value};
      }
    }
    // add regular property to the end of list without vendor prefixes
    #{$prop}: #{$value};
  }
}

// Simple mixin for border-radius changes. just include this mixin and provide a value and you're good to go.
@mixin border-radius($radius) {
  // @warn 'The `border-radius()` mixin will be deprecated in version 2.0.';
  @include prefix( (border-radius: $radius), webkit ms o moz);
}

// Button mixin creates a button. All it needs is a color added to background yay! 
// No more using the extend class on the button each time bloating the output CSS.
$Placeholder-Selectors: ();
@mixin button($color, $extend: true) {
  @include button-static($extend);
  background-color: $color;
  color: dt($color);
  a {
    color: dt($color);
    text-decoration: none;
  }
  // border-color: mix($white, $color, 25%);
  &:hover {
    background-color: mix($black, $color, 15%);
    border-color: mix($black, $color, 40%);
    color: dt($color);
    text-decoration: none;
  }
}

@mixin button-static($extend: true) {
  $button-selector: map-get($Placeholder-Selectors, 'button');
  @if $extend==true {
    @if $button-selector==null {
      $button-selector: unique-id();
      $Placeholder-Selectors: map-merge($Placeholder-Selectors, ('button': $button-selector)) !global;
      @at-root %#{$button-selector} {
        @include button-static(false);
      }
    }
    @extend %#{$button-selector};
  }
  @else {
    border: none;
    padding-left: 10px;
    padding-right: 10px;
    display: inline-block;
    text-align: center;
    vertical-align: middle;
    margin-bottom: 0;
    @include border-radius(0px);
    &:hover {
      cursor: pointer;
    }
  }
}

// This mixin calls on the calculateRem function in the functions partial file it will output the pixel size 
// first then the rem unit for browswer that support it (IE9+).
@mixin font-size($size) {
  font-size: $size;
  font-size: calculateEm($size);
  // font-size: calculateRem($size);
}

// RESPONSIVE IMAGE
//
// Keep images from scaling beyond the width of their parents.
@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  // Part 1: Set a maximum relative to the parent
  height: auto;
  // Part 2: Scale the height according to the width, otherwise you get stretching
}

$mq-small: 320px;
$mq-medium: 768px;
$mq-large: 1200px;
$mq-xlarge: 1600px;

// These mixins help with creating media queries. They can now be more semantic instead of worrying about the 
// syntax of the @media call you can just call the mixin and place in your content. This does all that for you!

// LARGE SCREEN BREAKPOINTS (EX. DESKTOP VIEWS)
@mixin breakpoint-xl {
  // LARGE SCREEN BREAKPOINTS (USED ONLY WHEN ABSOLUTELY NECESSARY. TARGETING OVER 1800PX)
  @media only screen and (min-width: $mq-xlarge) {
    @content;
  }
}

@mixin breakpoint-lg {
  @media only screen and (min-width: $mq-large) {
    @content;
  }
}

// MEDIUM SCREEN BREAKPOINTS (EX. SMALL LAPTOPS,TABLETS,)
@mixin breakpoint-md {
  @media only screen and (min-width: $mq-medium) and (max-width: 1024px) {
    @content;
  }
}

// small screen breakpoints (ex. phones and phablets)
@mixin breakpoint-sm {
  @media only screen and (min-width: $mq-small) and (max-width: 480px) {
    @content;
  }
}

$fq-xlarge: cb(1920px) !default;
$fq-large: cb(1440px) !default;
$fq-medium: cb(1024px) !default;
$fq-small: cb(640px) !default;
// Define the upper and lower range of the media queries programatically for more complex media queries
$fq-small-range: (0, $fq-small) !default;
$fq-medium-range: ($fq-small + ce(1px), $fq-medium) !default;
$fq-large-range: ($fq-medium + ce(1px), $fq-large) !default;
$fq-xlarge-range: ($fq-large + ce(1px), $fq-xlarge) !default;
// ==========================FLEXBOX Media Queries for Flex Grid============================
@mixin flexpoint-xl {
  // Smaller and Medium screen sizes
  @media (min-width: $fq-xlarge) {
    @content;
  }
}

@mixin flexpoint-lg {
  // Smaller and Medium screen sizes
  @media (min-width: $fq-large) {
    @content;
  }
}

@mixin flexpoint-md {
  // Smaller and Medium screen sizes
  @media (min-width: $fq-medium) {
    @content;
  }
}

// smaller screen breakpoints
@mixin flexpoint-sm {
  @media (min-width: $fq-small) {
    @content;
  }
}

// This mixin will alleviate the need to write the vendor prefixes yourself for animations. 
// Now all you have to do is call this mixin and enter your animation name and enter your actions.

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

// This mixin can to be coupled with the keyframes animation above. 
// Use this one to give animation action values like timing and looping, etc.
@mixin animation($str) {
  @include prefix((animation: $str), webkit moz ms o);
}

// Quick hip-fire way to call transition effects in your Sass files. No more worrying about prefixes either.
@mixin transition($args) {
  @include prefix ((transition: $args), webkit moz ms o);
}

@mixin link-color($link, $visited, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visited;
    }
    &:hover {
      color: $hover;
    }
    &:active {
      color: $active;
    }
  }
}

// FlexBox mixins for browser support
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin flex-direction($values: row) {
  -ms-flex-direction: $values;
  flex-direction: $values;
}

@mixin flex-flow($direction: row, $wrap: wrap) {
  flex-flow: $direction $wrap;
}

@mixin align-items($values: center) {
  -webkit-box-align: $values;
  -moz-box-align: $values;
  -ms-flex-align: $values;
  -webkit-align-items: $values;
  align-items: $values;
}

@mixin align-content($value: center) {
  align-items: $value;
}

@mixin justify-content($values: flex-start) {
  -webkit-box-pack: $values;
  -moz-box-pack: $values;
  -ms-flex-pack: $values;
  -webkit-justify-content: $values;
  justify-content: $values;
}

@mixin order($value) {
  -webkit-box-ordinal-group: $value;
  -moz-box-ordinal-group: $value;
  -ms-flex-order: $value;
  -webkit-order: $value;
  order: $value;
}
