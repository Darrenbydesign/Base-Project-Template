// functions for use with the mixin library I am building for FastTrack Projects
// This calculation converts any given pixel size for type into a relative em unit for better responsize typography on smaller and larger than desktop devices.
@function calculateRem($size) {
  $remSize: $size /16px;
  @return $remSize * 1rem;
}

@function calculateEm($size) {
  $EmSize: $size /16px;
  @return $EmSize * 1em;
}

@function calculateBreakpoint($bp-size) {
  $breapointSizeEms: $bp-size / 16px;
  @return $breapointSizeEms * 1em;
}

// This function is designed to convert a pixel based size to a percentage unit for responsive purposes. This can be helpful in creating your own grid system if necessary...
// This formula comes from the responsize design tenant: target / context = result.
// So for example if you have a container that is 1000px wide and you want to place an element in that container that is 650px wide...
// This would be the equation: 650px(target)/1000px(context)= 65%(result)
@function calculatePercent($target, $container) {
  @return ($target / $container) * 100%;
}

// Createing a shorthand names for quicker use if you're extremely lazy....or cant type...or just don't like long function names
@function ce($size) {
  @return calculateEm($size);
}

@function cb($bp-size) {
  @return calculateBreakpoint($bp-size);
}

@function cr($size) {
  @return calculateRem($size);
}

@function cp($target, $container) {
  @return calculatePercent($target, $container);
}

@function dt($color) {
  @return dynamicTextColor($color);
}

/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}
// This bad boy uses Sass to dynamically change the text color to black or white depending on the backrground color of the element you use it in! That is amazing
$dark-text: #4d4d4d;
$light-text: #fff;
@function dynamicTextColor($color) {
  @if (lightness($color) > 50) {
    @return $dark-text; // This should return black text for items with lighter backgrounds
  }
  @else {
    @return $light-text; // This should return white text for items with dark backgrounds
  }
}



// Function to remove units from a measurement
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0  +  1);
  }
  @return $number;
}

// Power function borrowed from the compass framework
@function pow($number, $exp) {
  $value: 1;
  @if $exp >= 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}